From fa66cc905714c94bca6580c9adf7b57fa3b1da02 Mon Sep 17 00:00:00 2001
From: Thomas White <taw@bitwiz.org.uk>
Date: Thu, 6 May 2010 05:40:33 -0700
Subject: [PATCH 13/14] Debug statements for testing

Signed-off-by: Thomas White <taw@bitwiz.org.uk>
---
 drivers/mfd/glamo/glamo-display.c |    7 +++++++
 drivers/video/backlight/jbt6k74.c |    4 +++-
 2 files changed, 10 insertions(+), 1 deletions(-)

diff --git a/drivers/mfd/glamo/glamo-display.c b/drivers/mfd/glamo/glamo-display.c
index 75ad734..57292ff 100644
--- a/drivers/mfd/glamo/glamo-display.c
+++ b/drivers/mfd/glamo/glamo-display.c
@@ -257,6 +257,8 @@ static int glamo_crtc_mode_set_base(struct drm_crtc *crtc, int x, int y,
 	u32 addr;
 	u16 addr_low, addr_high;
 
+	printk(KERN_CRIT "Setting base!\n");
+
 	if (!crtc->fb) {
 		DRM_DEBUG("No FB bound\n");
 		return -EINVAL;
@@ -311,6 +313,8 @@ static int glamo_crtc_mode_set(struct drm_crtc *crtc,
 		msleep(500);
 	}
 
+	printk(KERN_CRIT "Setting mode!\n");
+
 	/* Rotate? */
 	if ( (mode->hdisplay == 640) && (mode->vdisplay == 480) ) {
 		rot = GLAMO_LCD_ROT_MODE_90;
@@ -935,15 +939,18 @@ void glamo_lcd_power(struct glamodrm_handle *gdrm, int mode)
 	struct glamo_crtc *gcrtc = to_glamo_crtc(crtc);
 
 	if ( mode ) {
+		printk(KERN_CRIT "Power on sequence\n");
 		glamo_engine_enable(gdrm->glamo_core, GLAMO_ENGINE_LCD);
 		gcrtc->pixel_clock_on = 1;
 		jbt6k74_setpower(JBT_POWER_MODE_NORMAL);
 		if ( gcrtc->current_mode_set ) {
+			printk(KERN_CRIT "Setting previous mode\n");
 			glamo_crtc_mode_set(crtc, &gcrtc->current_mode,
 			                    &gcrtc->current_mode, 0, 0,
 			                    gcrtc->current_fb);
 		}
 	} else {
+		printk(KERN_CRIT "Power off sequence\n");
 		jbt6k74_setpower(JBT_POWER_MODE_OFF);
 		glamo_engine_suspend(gdrm->glamo_core, GLAMO_ENGINE_LCD);
 		gcrtc->pixel_clock_on = 0;
diff --git a/drivers/video/backlight/jbt6k74.c b/drivers/video/backlight/jbt6k74.c
index 91651e7..56a3e3a 100644
--- a/drivers/video/backlight/jbt6k74.c
+++ b/drivers/video/backlight/jbt6k74.c
@@ -389,7 +389,7 @@ static int jbt6k74_enter_power_mode(struct jbt_info *jbt,
 {
 	int ret = -EINVAL;
 
-	dev_dbg(&jbt->spi->dev, "entering (old_state=%s, new_state=%s)\n",
+	printk(KERN_CRIT "entering (old_state=%s, new_state=%s)\n",
 			jbt_power_mode_names[jbt->power_mode],
 			jbt_power_mode_names[new_mode]);
 
@@ -825,7 +825,9 @@ EXPORT_SYMBOL_GPL(jbt6k74_finish_resolutionchange);
 
 void jbt6k74_setpower(enum jbt_power_mode new_power)
 {
+	printk(KERN_CRIT "About to set power..\n");
 	if ( !jbt_global ) return;
+	printk(KERN_CRIT "Setting JBT power.. %i\n", new_power);
 	jbt6k74_enter_power_mode(jbt_global, new_power);
 }
 EXPORT_SYMBOL_GPL(jbt6k74_setpower);
-- 
1.7.1

