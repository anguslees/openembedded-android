--- ticodecplugin/ChangeLog
+++ ticodecplugin.new/ChangeLog
@@ -1,3 +1,7 @@
+2009-08-14  Don Darling, Texas Instruments, Inc.
+	* src/{gstticodecplugin_omap3530.cfg,gstticodecs_omap3530.c}:
+	Update OMAP3530 Support to use DVSDK 3.00.00.40.
+
 2009-07-28 Brijesh Singh, Texas Instruments, Inc.
 	* src/{gstticircbuffer.c}:
 	Fix potential memory leak in circular buffer when accel framecopy flag is 
--- ticodecplugin/src/gstticodecplugin_omap3530.cfg
+++ ticodecplugin.new/src/gstticodecplugin_omap3530.cfg
@@ -12,8 +12,6 @@
  *
  */
 
-prog.build.platform = "ti.platforms.evm3530";
-
 /* Load the Codec Engine 'Operating System Abstraction Layer' */
 var osalGlobal = xdc.useModule('ti.sdo.ce.osal.Global');
 
@@ -27,31 +25,20 @@ ipc.commType = ipc.COMM_DSPLINK;
 /*
  *  ======== Engine Configuration ========
  */
-var Engine    = xdc.useModule('ti.sdo.ce.Engine');
-var encEngine = Engine.createFromServer(
-    "encode",
-    "./encodeCombo.x64P",
-    "ti.sdo.servers.encode"
-    );
-var decEngine = Engine.createFromServer(
-    "decode",
-    "./decodeCombo.x64P",
-    "ti.sdo.servers.decode"
+var Engine = xdc.useModule('ti.sdo.ce.Engine');
+var demoEngine = Engine.createFromServer(
+    "codecServer",
+    "./bin/cs.x64P",
+    "ti.sdo.server.cs"
     );
 
-var encpath = "" + java.lang.System.getenv("ENCODE_COMBO");
-if (encpath != "" && encpath != "null") {
-	encEngine.server = java.lang.System.getenv("ENCODE_COMBO");
-}
-
-var decpath = "" + java.lang.System.getenv("DECODE_COMBO");
-if (decpath != "" && decpath != "null") {
-	decEngine.server = java.lang.System.getenv("DECODE_COMBO"); 
+var combopath = "" + java.lang.System.getenv("CODEC_SERVER");
+if (combopath != "" && combopath != "null") {
+	demoEngine.server = java.lang.System.getenv("CODEC_SERVER");
 }
 
 /* Load support for the DMAI module */
 var DMAI = xdc.loadPackage('ti.sdo.dmai');
 
-/* Load support for user space DMA */
-var SCPY = xdc.useModule("ti.sdo.fc.scpy.SCPY");
-var SDMA = xdc.useModule("ti.sdo.linuxutils.sdma.SDMA");
+var SCPY = xdc.useModule('ti.sdo.fc.scpy.SCPY');
+var SDMA = xdc.useModule('ti.sdo.linuxutils.sdma.SDMA');
--- ticodecplugin/src/gstticodecs_omap3530.c
+++ ticodecplugin.new/src/gstticodecs_omap3530.c
@@ -22,8 +22,7 @@
 #include "gstticodecs.h"
 
 /* Declaration of the production engine and decoders shipped with the DVSDK */
-static Char decodeEngine[] = "decode";
-static Char encodeEngine[] = "encode";
+static Char codecServer[] = "codecServer";
 
 /* NULL terminated list of speech decoders in the engine to use in the demo */
 GstTICodec gst_ticodec_codecs[] = {
@@ -32,59 +31,55 @@ GstTICodec gst_ticodec_codecs[] = {
     {
         "AAC Audio Decoder",     /* String name of codec used by plugin      */
         "aachedec",              /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     }, {
         "MPEG1L2 Audio Decoder", /* String name of codec used by plugin      */
         "mp3dec",                /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     }, {
         "MPEG1L3 Audio Decoder", /* String name of codec used by plugin      */
         "mp3dec",                /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
-    }, {
-        "WMA Audio Decoder",     /* String name of codec used by plugin      */
-        "wmadec",                /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
-    
+
     /* Video Decoders */
     {
         "H.264 Video Decoder",   /* String name of codec used by plugin      */
         "h264dec",               /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     }, {
         "MPEG4 Video Decoder",   /* String name of codec used by plugin      */
         "mpeg4dec",              /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     }, {
         "MPEG2 Video Decoder",   /* String name of codec used by plugin      */
         "mpeg2dec",              /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     /* Image Decoders */
     {
         "JPEG Image Decoder",    /* String name of codec used by plugin      */
         "jpegdec",               /* String name of codec used by CE          */
-        decodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     /* Video Encoders */
     {
         "H.264 Video Encoder",   /* String name of codec used by plugin      */
         "h264enc",               /* String name of codec used by CE          */
-        encodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     }, {
         "MPEG4 Video Encoder",   /* String name of codec used by plugin      */
         "mpeg4enc",              /* String name of codec used by CE          */
-        encodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     /* Image Encoders */
     {
         "JPEG Image Encoder",    /* String name of codec used by plugin      */
         "jpegenc",               /* String name of codec used by CE          */
-        encodeEngine             /* Engine that contains this codec          */
+        codecServer              /* Engine that contains this codec          */
     },
 
     { NULL }

